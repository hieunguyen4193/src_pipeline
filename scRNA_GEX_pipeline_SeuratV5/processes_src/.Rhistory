#
#####----------------------------------------------------------------------#####
path.to.first.exp <- sprintf("/home/hieunguyen/CRC1382/src/LKopplin_first_exp_scRNA_data/OUTPUT/%s_round", analysis.round.1st.exp)
all_first_exprs <- Sys.glob(file.path(path.to.first.exp, "*"))
names(all_first_exprs) <-  to_vec(for(exprs in all_first_exprs) str_replace(basename(exprs), sprintf("_%s_round", analysis.round.1st.exp), ""))
#####----------------------------------------------------------------------#####
#
# PATH TO THE DEEPER DATASET
#
#####----------------------------------------------------------------------#####
path.to.deeper.exp <- sprintf("/media/hieunguyen/HD0/ext_HDD/CRC1382/src/211227_deeper_scRNA_LKopplin/OFFICIAL/high_confidence_VDJ_contigs/OUTPUT/%s_round", analysis.round)
all_deeper_exprs <- Sys.glob(file.path(path.to.deeper.exp, "*"))
names(all_deeper_exprs) <-  to_vec(for(exprs in all_deeper_exprs) str_replace(basename(exprs), sprintf("_%s_round", analysis.round), ""))
#####----------------------------------------------------------------------#####
#
# BEGIN THE MAIN ANALYSIS
#
#####----------------------------------------------------------------------#####
all_exprs <- c(all_first_exprs, all_deeper_exprs)
data.list <- list()
##### PROCESSING THE FIRST DATASET
for (i in seq_along(all_first_exprs)){
data.list[[i]] <- readRDS(Sys.glob(file.path(all_first_exprs[[i]], "s8a_output", "*.rds")))
}
first.exp.s.obj <- merge(x = data.list[[1]],
y = unlist(data.list[2:length(data.list)]),
merge.data = FALSE,
add.cell.ids = names(all_first_exprs),
project = PROJECT)
chosen.assay <- "RNA"
DefaultAssay(first.exp.s.obj) <- chosen.assay
first.exp.s.obj <- NormalizeData(first.exp.s.obj) # ---> use Log Normalized
first.exp.s.obj <- FindVariableFeatures(first.exp.s.obj, selection.method = "vst")
first.exp.s.obj <- ScaleData(first.exp.s.obj, features = rownames(first.exp.s.obj))
first.exp.s.obj <- RunPCA(first.exp.s.obj, npcs = 25, verbose = FALSE, reduction.name=sprintf("%s_PCA", chosen.assay))
first.exp.s.obj <- RunUMAP(first.exp.s.obj, reduction = sprintf("%s_PCA", chosen.assay), dims = 1:25, reduction.name=sprintf("%s_UMAP", chosen.assay))
##### PROCESSING THE DEEPER DATASET
data.list <- list()
for (i in seq_along(all_deeper_exprs)){
data.list[[i]] <- readRDS(Sys.glob(file.path(all_deeper_exprs[[i]], "s8a_output", "*.rds")))
}
deeper.exp.s.obj <- merge(x = data.list[[1]],
y = unlist(data.list[2:length(data.list)]),
merge.data = FALSE,
add.cell.ids = names(all_deeper_exprs),
project = PROJECT)
chosen.assay <- "RNA"
DefaultAssay(deeper.exp.s.obj) <- chosen.assay
deeper.exp.s.obj <- NormalizeData(deeper.exp.s.obj) # ---> use Log Normalized
deeper.exp.s.obj <- FindVariableFeatures(deeper.exp.s.obj, selection.method = "vst")
deeper.exp.s.obj <- ScaleData(deeper.exp.s.obj, features = rownames(deeper.exp.s.obj))
deeper.exp.s.obj <- RunPCA(deeper.exp.s.obj, npcs = 25, verbose = FALSE, reduction.name=sprintf("%s_PCA", chosen.assay))
deeper.exp.s.obj <- RunUMAP(deeper.exp.s.obj, reduction = sprintf("%s_PCA", chosen.assay), dims = 1:25, reduction.name=sprintf("%s_UMAP", chosen.assay))
deeper_exp_umap <- DimPlot(object = deeper.exp.s.obj, reduction = "RNA_UMAP", group.by = "name", label = TRUE, label.box = TRUE, repel = TRUE)
deeper_exp_umap
set.seed(42)
deeper.exp.s.obj <- RunUMAP(deeper.exp.s.obj, reduction = sprintf("%s_PCA", chosen.assay), dims = 1:25, reduction.name=sprintf("%s_UMAP", chosen.assay))
deeper_exp_umap <- DimPlot(object = deeper.exp.s.obj, reduction = "RNA_UMAP", group.by = "name", label = TRUE, label.box = TRUE, repel = TRUE)
deeper_exp_umap
#####----------------------------------------------------------------------#####
#
# PATH TO THE DEEPER DATASET
#
#####----------------------------------------------------------------------#####
path.to.deeper.exp <- sprintf("/media/hieunguyen/HD0/ext_HDD/CRC1382/src/211227_deeper_scRNA_LKopplin/OFFICIAL/high_confidence_VDJ_contigs/OUTPUT_10082022/%s_round", analysis.round)
all_deeper_exprs <- Sys.glob(file.path(path.to.deeper.exp, "*"))
names(all_deeper_exprs) <-  to_vec(for(exprs in all_deeper_exprs) str_replace(basename(exprs), sprintf("_%s_round", analysis.round), ""))
#####----------------------------------------------------------------------#####
#
# BEGIN THE MAIN ANALYSIS
#
#####----------------------------------------------------------------------#####
all_exprs <- c(all_first_exprs, all_deeper_exprs)
data.list <- list()
##### PROCESSING THE FIRST DATASET
for (i in seq_along(all_first_exprs)){
data.list[[i]] <- readRDS(Sys.glob(file.path(all_first_exprs[[i]], "s8a_output", "*.rds")))
}
first.exp.s.obj <- merge(x = data.list[[1]],
y = unlist(data.list[2:length(data.list)]),
merge.data = FALSE,
add.cell.ids = names(all_first_exprs),
project = PROJECT)
chosen.assay <- "RNA"
DefaultAssay(first.exp.s.obj) <- chosen.assay
first.exp.s.obj <- NormalizeData(first.exp.s.obj) # ---> use Log Normalized
first.exp.s.obj <- FindVariableFeatures(first.exp.s.obj, selection.method = "vst")
first.exp.s.obj <- ScaleData(first.exp.s.obj, features = rownames(first.exp.s.obj))
first.exp.s.obj <- RunPCA(first.exp.s.obj, npcs = 25, verbose = FALSE, reduction.name=sprintf("%s_PCA", chosen.assay))
first.exp.s.obj <- RunUMAP(first.exp.s.obj, reduction = sprintf("%s_PCA", chosen.assay), dims = 1:25, reduction.name=sprintf("%s_UMAP", chosen.assay))
##### PROCESSING THE DEEPER DATASET
data.list <- list()
for (i in seq_along(all_deeper_exprs)){
data.list[[i]] <- readRDS(Sys.glob(file.path(all_deeper_exprs[[i]], "s8a_output", "*.rds")))
}
deeper.exp.s.obj <- merge(x = data.list[[1]],
y = unlist(data.list[2:length(data.list)]),
merge.data = FALSE,
add.cell.ids = names(all_deeper_exprs),
project = PROJECT)
chosen.assay <- "RNA"
DefaultAssay(deeper.exp.s.obj) <- chosen.assay
deeper.exp.s.obj <- NormalizeData(deeper.exp.s.obj) # ---> use Log Normalized
deeper.exp.s.obj <- FindVariableFeatures(deeper.exp.s.obj, selection.method = "vst")
deeper.exp.s.obj <- ScaleData(deeper.exp.s.obj, features = rownames(deeper.exp.s.obj))
deeper.exp.s.obj <- RunPCA(deeper.exp.s.obj, npcs = 25, verbose = FALSE, reduction.name=sprintf("%s_PCA", chosen.assay))
deeper.exp.s.obj <- RunUMAP(deeper.exp.s.obj, reduction = sprintf("%s_PCA", chosen.assay), dims = 1:25, reduction.name=sprintf("%s_UMAP", chosen.assay))
deeper_exp_umap <- DimPlot(object = deeper.exp.s.obj, reduction = "RNA_UMAP", group.by = "name", label = TRUE, label.box = TRUE, repel = TRUE)
deeper_exp_umap
deeper_exp_umap
path.to.deeper.exp <- sprintf("/media/hieunguyen/HD0/ext_HDD/CRC1382/src/211227_deeper_scRNA_LKopplin/OFFICIAL/high_confidence_VDJ_contigs/OUTPUT_mt_thres10/%s_round", analysis.round)
all_deeper_exprs <- Sys.glob(file.path(path.to.deeper.exp, "*"))
names(all_deeper_exprs) <-  to_vec(for(exprs in all_deeper_exprs) str_replace(basename(exprs), sprintf("_%s_round", analysis.round), ""))
#####----------------------------------------------------------------------#####
#
# BEGIN THE MAIN ANALYSIS
#
#####----------------------------------------------------------------------#####
all_exprs <- c(all_first_exprs, all_deeper_exprs)
data.list <- list()
for (i in seq_along(all_deeper_exprs)){
data.list[[i]] <- readRDS(Sys.glob(file.path(all_deeper_exprs[[i]], "s8a_output", "*.rds")))
}
deeper.exp.s.obj <- merge(x = data.list[[1]],
y = unlist(data.list[2:length(data.list)]),
merge.data = FALSE,
add.cell.ids = names(all_deeper_exprs),
project = PROJECT)
chosen.assay <- "RNA"
DefaultAssay(deeper.exp.s.obj) <- chosen.assay
deeper.exp.s.obj <- NormalizeData(deeper.exp.s.obj) # ---> use Log Normalized
deeper.exp.s.obj <- FindVariableFeatures(deeper.exp.s.obj, selection.method = "vst")
deeper.exp.s.obj <- ScaleData(deeper.exp.s.obj, features = rownames(deeper.exp.s.obj))
deeper.exp.s.obj <- RunPCA(deeper.exp.s.obj, npcs = 25, verbose = FALSE, reduction.name=sprintf("%s_PCA", chosen.assay))
deeper.exp.s.obj <- RunUMAP(deeper.exp.s.obj, reduction = sprintf("%s_PCA", chosen.assay), dims = 1:25, reduction.name=sprintf("%s_UMAP", chosen.assay))
deeper_exp_umap <- DimPlot(object = deeper.exp.s.obj, reduction = "RNA_UMAP", group.by = "name", label = TRUE, label.box = TRUE, repel = TRUE)
deeper_exp_umap
deeper_exp_umap
deeper.exp.s.obj
all_deeper_exprs
a = readrDS("/home/hieunguyen/CRC1382/src/211227_deeper_scRNA_LKopplin/OFFICIAL/high_confidence_VDJ_contigs/OUTPUT_release_01092022/1st_round/GFP_m1_1st_round/s3_output/LKopplin_deeper_data.output.s3.rds")
readRDS("/home/hieunguyen/CRC1382/src/211227_deeper_scRNA_LKopplin/OFFICIAL/high_confidence_VDJ_contigs/OUTPUT_release_01092022/1st_round/GFP_m1_1st_round/s3_output/LKopplin_deeper_data.output.s3.rds")
readRDS("/home/hieunguyen/CRC1382/src/211227_deeper_scRNA_LKopplin/OFFICIAL/high_confidence_VDJ_contigs/OUTPUT/1st_round/GFP_m1_1st_round/s3_output/LKopplin_deeper_data.output.s3.rds")
file.path(all_first_exprs[[i]], "s8a_output", "*.rds"))
a = readRDS(file.path(all_first_exprs[[1]], "s8a_output", "*.rds"))
a = readRDS(file.path(all_first_exprs[[1]], "s8a_output", "*.rds"))
file.path(all_first_exprs[[1]], "s8a_output", "*.rds")
file.path(all_deeper_exprs[[1]], "s8a_output", "*.rds")
Sys.glob(file.path(all_first_exprs[[1]], "s8a_output", "*.rds"))
a = readRDS("/home/hieunguyen/CRC1382/src/LKopplin_first_exp_scRNA_data/OUTPUT/2nd_round/CD45exp1_m1_2nd_round/s8a_output/LKopplin_1st_scRNA_exp.output.s8a.rds")
a
Sys.glob(file.path(all_deeper_exprs[[1]], "s8a_output", "*.rds"))
a = readRDS("/media/hieunguyen/HD0/ext_HDD/CRC1382/src/211227_deeper_scRNA_LKopplin/OFFICIAL/high_confidence_VDJ_contigs/OUTPUT_mt_thres10/2nd_round/GFP_m1_2nd_round/s8a_output/LKopplin_deeper_data.output.s8a.rds")
a
dimplot(a, reduction = "RNA_UMAP")
DimPlot(a, reduction = "RNA_UMAP")
data.list <- list()
for (i in seq_along(all_deeper_exprs)){
data.list[[i]] <- readRDS(Sys.glob(file.path(all_deeper_exprs[[i]], "s8a_output", "*.rds")))
}
deeper.exp.s.obj <- merge(x = data.list[[1]],
y = unlist(data.list[2:length(data.list)]),
merge.data = FALSE,
add.cell.ids = names(all_deeper_exprs),
project = PROJECT)
DimPlot(deeper.exp.s.obj, reduction = "RNA_UMAP")
deeper.exp.s.obj
deeper.exp.s.obj <- RunUMAP(deeper.exp.s.obj, reduction = sprintf("%s_PCA", chosen.assay), dims = 1:25, reduction.name=sprintf("%s_UMAP", chosen.assay))
deeper.exp.s.obj <- RunPCA(deeper.exp.s.obj, npcs = 25, verbose = FALSE, reduction.name=sprintf("%s_PCA", chosen.assay))
deeper.exp.s.obj
deeper.exp.s.obj <- merge(x = data.list[[1]],
y = unlist(data.list[2:length(data.list)]),
merge.data = TRUE,
add.cell.ids = names(all_deeper_exprs),
project = PROJECT)
deeper.exp.s.obj
deeper.exp.s.obj <- merge(x = data.list[[1]],
y = unlist(data.list[2:length(data.list)]),
merge.data = FALSE,
add.cell.ids = names(all_deeper_exprs),
project = PROJECT)
deeper.exp.s.obj
chosen.assay <- "RNA"
DefaultAssay(deeper.exp.s.obj) <- chosen.assay
deeper.exp.s.obj <- NormalizeData(deeper.exp.s.obj) # ---> use Log Normalized
deeper.exp.s.obj <- FindVariableFeatures(deeper.exp.s.obj, selection.method = "vst")
deeper.exp.s.obj <- ScaleData(deeper.exp.s.obj, features = rownames(deeper.exp.s.obj))
deeper.exp.s.obj <- RunPCA(deeper.exp.s.obj, npcs = 25, verbose = FALSE, reduction.name=sprintf("%s_PCA", chosen.assay))
deeper.exp.s.obj <- RunUMAP(deeper.exp.s.obj, reduction = sprintf("%s_PCA", chosen.assay), dims = 1:25, reduction.name=sprintf("%s_UMAP", chosen.assay))
deeper_exp_umap <- DimPlot(object = deeper.exp.s.obj, reduction = "RNA_UMAP", group.by = "name", label = TRUE, label.box = TRUE, repel = TRUE)
deeper_exp_umap
predictions <- TransferData(anchorset = integration.anchors, refdata = first.exp.s.obj$stage,
dims = 1:25)
integration.anchors <- FindTransferAnchors(reference = first.exp.s.obj, query = deeper.exp.s.obj,
dims = 1:25, reference.reduction = "RNA_PCA")
predictions <- TransferData(anchorset = integration.anchors, refdata = first.exp.s.obj$stage,
dims = 1:25)
deeper.exp.s.obj <- AddMetaData(deeper.exp.s.obj, metadata = predictions$predicted.id, col.name = "prediction")
deeper.exp.s.obj
Dimplot(deeper.exp.s.obj, reduction = "RNA_UMAP")
DimPlot(deeper.exp.s.obj, reduction = "RNA_UMAP")
DimPlot(deeper.exp.s.obj, reduction = "RNA_UMAP", group.by = "prediction")
path.to.output
a
DimPlot(a, reduction = "RNA_UMAP")
deeper_exp_umap <- DimPlot(object = deeper.exp.s.obj, reduction = "RNA_UMAP", group.by = "name", label = TRUE, label.box = TRUE, repel = TRUE)
deeper_exp_umap
?deeper_exp_umap
?merge
deeper.exp.s.obj <- merge(x = data.list[[1]],
y = unlist(data.list[2:length(data.list)]),
merge.data = TRUE,
add.cell.ids = names(all_deeper_exprs),
project = PROJECT)
deeper.exp.s.obj
data.list[[1]]
deeper.exp.s.obj <- NormalizeData(deeper.exp.s.obj) # ---> use Log Normalized
deeper.exp.s.obj <- FindVariableFeatures(deeper.exp.s.obj, selection.method = "vst")
deeper.exp.s.obj <- ScaleData(deeper.exp.s.obj)
deeper.exp.s.obj <- RunPCA(deeper.exp.s.obj, npcs = 25, verbose = FALSE, reduction.name=sprintf("%s_PCA", chosen.assay))
deeper.exp.s.obj <- RunUMAP(deeper.exp.s.obj, reduction = sprintf("%s_PCA", chosen.assay), dims = 1:25, reduction.name=sprintf("%s_UMAP", chosen.assay))
deeper_exp_umap
#####----------------------------------------------------------------------#####
#
# 02: Merge first experiment data with the deeper experiment data, transfer labels
# to eliminate the CD45 cells. Keep onl GFP cells for further downstream analysis
#
#####----------------------------------------------------------------------#####
##### clean up env
gc()
rm(list = ls())
##### import libraries
library(data.table)
library(viridis)
library(xlsx)
#####----------------------------------------------------------------------#####
#
# CONFIGURATIONS
#
#####----------------------------------------------------------------------#####
integration <- TRUE
analysis.round.1st.exp <- "2nd"
analysis.round <- "2nd"
num.dim.integration <- 25
num.PCA <- 25
num.dim.cluster <- 25
path.to.pipeline.src <- "/home/hieunguyen/CRC1382/src/src_pipeline/scRNA_GEX_pipeline"
path.to.output <- "/media/hieunguyen/HD0/ext_HDD/CRC1382/src/211227_deeper_scRNA_LKopplin/OFFICIAL/high_confidence_VDJ_contigs/OUTPUT/merge_downstream_analysis"
dir.create(path.to.output, showWarnings = FALSE)
save_figures_to_report <- "/media/hieunguyen/HD0/ext_HDD/CRC1382/src/211227_deeper_scRNA_LKopplin/OFFICIAL/high_confidence_VDJ_contigs/manually_saved_figures"
dir.create(save_figures_to_report, showWarnings = FALSE)
path2src <- file.path(path.to.pipeline.src, "processes_src")
set.seed(411)
PROJECT <- "LKopplin_merge_dataset"
#####----------------------------------------------------------------------#####
#
# COMPILE HELPER FUNCTIONS
#
#####----------------------------------------------------------------------#####
source(file.path(path2src, "import_libraries.R"))
source(file.path(path2src, "s8_integration_and_clustering.R"))
#####----------------------------------------------------------------------#####
#
# PATH TO THE FIRST DATASET
#
#####----------------------------------------------------------------------#####
path.to.first.exp <- sprintf("/home/hieunguyen/CRC1382/src/LKopplin_first_exp_scRNA_data/OUTPUT/%s_round", analysis.round.1st.exp)
all_first_exprs <- Sys.glob(file.path(path.to.first.exp, "*"))
names(all_first_exprs) <-  to_vec(for(exprs in all_first_exprs) str_replace(basename(exprs), sprintf("_%s_round", analysis.round.1st.exp), ""))
#####----------------------------------------------------------------------#####
#
# PATH TO THE DEEPER DATASET
#
#####----------------------------------------------------------------------#####
path.to.deeper.exp <- sprintf("/media/hieunguyen/HD0/ext_HDD/CRC1382/src/211227_deeper_scRNA_LKopplin/OFFICIAL/high_confidence_VDJ_contigs/OUTPUT_mt_thres10/%s_round", analysis.round)
all_deeper_exprs <- Sys.glob(file.path(path.to.deeper.exp, "*"))
names(all_deeper_exprs) <-  to_vec(for(exprs in all_deeper_exprs) str_replace(basename(exprs), sprintf("_%s_round", analysis.round), ""))
#####----------------------------------------------------------------------#####
#
# BEGIN THE MAIN ANALYSIS
#
#####----------------------------------------------------------------------#####
all_exprs <- c(all_first_exprs, all_deeper_exprs)
data.list <- list()
##### PROCESSING THE FIRST DATASET
for (i in seq_along(all_first_exprs)){
data.list[[i]] <- readRDS(Sys.glob(file.path(all_first_exprs[[i]], "s8a_output", "*.rds")))
}
first.exp.s.obj <- merge(x = data.list[[1]],
y = unlist(data.list[2:length(data.list)]),
merge.data = FALSE,
add.cell.ids = names(all_first_exprs),
project = PROJECT)
chosen.assay <- "RNA"
DefaultAssay(first.exp.s.obj) <- chosen.assay
first.exp.s.obj <- NormalizeData(first.exp.s.obj) # ---> use Log Normalized
first.exp.s.obj <- FindVariableFeatures(first.exp.s.obj, selection.method = "vst")
first.exp.s.obj <- ScaleData(first.exp.s.obj, features = rownames(first.exp.s.obj))
first.exp.s.obj <- RunPCA(first.exp.s.obj, npcs = 25, verbose = FALSE, reduction.name=sprintf("%s_PCA", chosen.assay))
first.exp.s.obj <- RunUMAP(first.exp.s.obj, reduction = sprintf("%s_PCA", chosen.assay), dims = 1:25, reduction.name=sprintf("%s_UMAP", chosen.assay))
##### PROCESSING THE DEEPER DATASET
data.list <- list()
for (i in seq_along(all_deeper_exprs)){
data.list[[i]] <- readRDS(Sys.glob(file.path(all_deeper_exprs[[i]], "s8a_output", "*.rds")))
}
deeper.exp.s.obj <- merge(x = data.list[[1]],
y = unlist(data.list[2:length(data.list)]),
merge.data = FALSE,
add.cell.ids = names(all_deeper_exprs),
project = PROJECT)
chosen.assay <- "RNA"
DefaultAssay(deeper.exp.s.obj) <- chosen.assay
deeper.exp.s.obj <- NormalizeData(deeper.exp.s.obj) # ---> use Log Normalized
deeper.exp.s.obj <- FindVariableFeatures(deeper.exp.s.obj, selection.method = "vst")
deeper.exp.s.obj <- ScaleData(deeper.exp.s.obj, features = rownames(deeper.exp.s.obj))
deeper.exp.s.obj <- RunPCA(deeper.exp.s.obj, npcs = 25, verbose = FALSE, reduction.name=sprintf("%s_PCA", chosen.assay))
deeper.exp.s.obj <- RunUMAP(deeper.exp.s.obj, reduction = sprintf("%s_PCA", chosen.assay), dims = 1:25, reduction.name=sprintf("%s_UMAP", chosen.assay))
deeper_exp_umap <- DimPlot(object = deeper.exp.s.obj, reduction = "RNA_UMAP", group.by = "name", label = TRUE, label.box = TRUE, repel = TRUE)
integration.anchors <- FindTransferAnchors(reference = first.exp.s.obj, query = deeper.exp.s.obj,
dims = 1:25, reference.reduction = "RNA_PCA")
deeper_exp_umap
chosen.assay <- "RNA"
DefaultAssay(deeper.exp.s.obj) <- chosen.assay
deeper.exp.s.obj <- NormalizeData(deeper.exp.s.obj) # ---> use Log Normalized
deeper.exp.s.obj <- FindVariableFeatures(deeper.exp.s.obj, selection.method = "vst")
deeper.exp.s.obj <- ScaleData(deeper.exp.s.obj, features = rownames(deeper.exp.s.obj))
deeper.exp.s.obj <- RunPCA(deeper.exp.s.obj, npcs = 25, verbose = FALSE, reduction.name=sprintf("%s_PCA", chosen.assay))
deeper.exp.s.obj <- RunUMAP(deeper.exp.s.obj, reduction = sprintf("%s_PCA", chosen.assay), dims = 1:25, reduction.name=sprintf("%s_UMAP", chosen.assay))
deeper_exp_umap <- DimPlot(object = deeper.exp.s.obj, reduction = "RNA_UMAP", group.by = "name", label = TRUE, label.box = TRUE, repel = TRUE)
deeper_exp_umap
##### clean up env
gc()
rm(list = ls())
##### import libraries
library(data.table)
library(viridis)
##### input parameters
integration <- TRUE
analysis.round.1st.exp <- "2nd"
analysis.round <- "2nd"
num.dim.integration <- 25
num.PCA <- 25
num.dim.cluster <- 25
##### define paths
path.to.pipeline.src <- "/home/hieunguyen/CRC1382/src/src_pipeline/scRNA_GEX_pipeline"
path_to_downstream_analysis_output <- "/home/hieunguyen/CRC1382/src/211227_deeper_scRNA_LKopplin/OFFICIAL/high_confidence_VDJ_contigs/OUTPUT/merge_downstream_analysis"
dir.create(path_to_downstream_analysis_output, showWarnings = FALSE)
path.to.output <- file.path(path_to_downstream_analysis_output, sprintf("merge_%s_firstExp_%s_deeperExp", analysis.round.1st.exp, analysis.round))
dir.create(path.to.output, showWarnings = FALSE)
path2src <- file.path(path.to.pipeline.src, "processes_src")
##### set random seed
set.seed(411)
##### compile source files of helper functions
source(file.path(path2src, "import_libraries.R"))
source(file.path(path2src, "s8_integration_and_clustering.R"))
##### import datasets
path.to.first.exp <- sprintf("/home/hieunguyen/CRC1382/src/LKopplin_first_exp_scRNA_data/OUTPUT/%s_round", analysis.round.1st.exp)
all_first_exprs <- Sys.glob(file.path(path.to.first.exp, "*"))
names(all_first_exprs) <-  to_vec(for(exprs in all_first_exprs) str_replace(basename(exprs), sprintf("_%s_round", analysis.round.1st.exp), ""))
path.to.deeper.exp <- sprintf("/home/hieunguyen/CRC1382/src/211227_deeper_scRNA_LKopplin/OFFICIAL/high_confidence_VDJ_contigs/OUTPUT/%s_round", analysis.round)
all_deeper_exprs <- Sys.glob(file.path(path.to.deeper.exp, "*"))
names(all_deeper_exprs) <-  to_vec(for(exprs in all_deeper_exprs) str_replace(basename(exprs), sprintf("_%s_round", analysis.round), ""))
all_exprs <- c(all_first_exprs, all_deeper_exprs)
PROJECT <- "LKopplin_merge_dataset"
data.list <- list()
for (i in seq_along(all_exprs)){
data.list[[i]] <- readRDS(Sys.glob(file.path(all_exprs[[i]], "s8a_output", "*.rds")))
}
s.obj <- merge(x = data.list[[1]],
y = unlist(data.list[2:length(data.list)]),
merge.data = FALSE,
add.cell.ids = names(all_exprs),
project = PROJECT)
chosen.assay <- "RNA"
DefaultAssay(s.obj) <- chosen.assay
s.obj <- NormalizeData(s.obj) # ---> use Log Normalized
s.obj <- FindVariableFeatures(s.obj, selection.method = "vst")
s.obj <- ScaleData(s.obj, features = rownames(s.obj))
s.obj <- RunPCA(s.obj, npcs = 25, verbose = FALSE, reduction.name=sprintf("%s_PCA", chosen.assay))
s.obj <- RunUMAP(s.obj, reduction = sprintf("%s_PCA", chosen.assay), dims = 1:25, reduction.name=sprintf("%s_UMAP", chosen.assay))
DimPlot(subset(s.obj, name %in% names(all_deeper_exprs)), reduction = "RNA_UMAP", group.by = "name", label = TRUE, label.box = TRUE, repel = TRUE) +
ggtitle("UMAP: GFP_m1, GFP_m2, GFP_m3")
DimPlot(subset(s.obj, name %in% names(all_first_exprs)), reduction = "RNA_UMAP", group.by = "name", label = TRUE, label.box = TRUE, repel = TRUE) +
ggtitle("UMAP: GFP_m1, GFP_m2, CD45_m1, CD45_m2")
if (file.exists(file.path(path.to.output, "s8_output/LKopplin_merge_dataset.output.s8.rds")) == TRUE){
s.obj <- readRDS(file.path(path.to.output, "s8_output/LKopplin_merge_dataset.output.s8.rds"))
} else {
s.obj <- NormalizeData(s.obj) # ---> use Log Normalized
s.obj <- FindVariableFeatures(s.obj, selection.method = "vst")
s.obj <- ScaleData(s.obj, features = rownames(s.obj))
s.obj <- RunPCA(s.obj, npcs = 25, verbose = FALSE, reduction.name=sprintf("%s_PCA", chosen.assay))
s.obj <- RunUMAP(s.obj, reduction = sprintf("%s_PCA", chosen.assay), dims = 1:25, reduction.name=sprintf("%s_UMAP", chosen.assay))
s.obj <- s8.integration.and.clustering(s.obj,
path.to.output,
TRUE,
PROJECT,
num.dim.integration,
num.PCA,
num.dim.cluster)
}
# GFP (Tregs) and CD45 (Teff)  build distinct clusters
p1 <- DimPlot(subset(s.obj, name %in% names(all_first_exprs)), reduction = "RNA_UMAP", group.by = "stage", ncol = 2, label = TRUE, label.box = TRUE, repel = TRUE) +
ggtitle("GFP (Tregs) and CD45 (Teff) \nbuild distinct clusters") + theme(legend.position = "none")
# first experience and deeper experience build distinct clusters --> batch effects
p2 <- DimPlot(s.obj, reduction = "RNA_UMAP", group.by = "name", ncol = 2, label = TRUE, label.box = TRUE, repel = TRUE) +
ggtitle("First exp. and deeper exp. \nbuild distinct clusters") + theme(legend.position = "none")
save_figures_to_report <- "/home/hieunguyen/CRC1382/src/211227_deeper_scRNA_LKopplin/OFFICIAL/high_confidence_VDJ_contigs/manually_saved_figures"
ggsave(plot = p2,
filename = file.path(save_figures_to_report, "merge_first_and_deeper_exp_into_1_UMAP.png"), device='png', dpi=300)
filtered.CD45.integrated <- DimPlot(object = filtered.deeper.exp.s.obj, reduction = "RNA_UMAP", split.by = "name", ncol = 2)
#####----------------------------------------------------------------------#####
#
# 02: Merge first experiment data with the deeper experiment data, transfer labels
# to eliminate the CD45 cells. Keep onl GFP cells for further downstream analysis
#
#####----------------------------------------------------------------------#####
##### clean up env
gc()
rm(list = ls())
##### import libraries
library(data.table)
library(viridis)
library(xlsx)
#####----------------------------------------------------------------------#####
#
# CONFIGURATIONS
#
#####----------------------------------------------------------------------#####
integration <- TRUE
analysis.round.1st.exp <- "2nd"
analysis.round <- "2nd"
num.dim.integration <- 25
num.PCA <- 25
num.dim.cluster <- 25
path.to.pipeline.src <- "/home/hieunguyen/CRC1382/src/src_pipeline/scRNA_GEX_pipeline"
path.to.output <- "/media/hieunguyen/HD0/ext_HDD/CRC1382/src/211227_deeper_scRNA_LKopplin/OFFICIAL/high_confidence_VDJ_contigs/OUTPUT/merge_downstream_analysis"
dir.create(path.to.output, showWarnings = FALSE)
save_figures_to_report <- "/media/hieunguyen/HD0/ext_HDD/CRC1382/src/211227_deeper_scRNA_LKopplin/OFFICIAL/high_confidence_VDJ_contigs/manually_saved_figures"
dir.create(save_figures_to_report, showWarnings = FALSE)
path2src <- file.path(path.to.pipeline.src, "processes_src")
set.seed(411)
PROJECT <- "LKopplin_merge_dataset"
#####----------------------------------------------------------------------#####
#
# COMPILE HELPER FUNCTIONS
#
#####----------------------------------------------------------------------#####
source(file.path(path2src, "import_libraries.R"))
source(file.path(path2src, "s8_integration_and_clustering.R"))
#####----------------------------------------------------------------------#####
#
# PATH TO THE FIRST DATASET
#
#####----------------------------------------------------------------------#####
path.to.first.exp <- sprintf("/home/hieunguyen/CRC1382/src/LKopplin_first_exp_scRNA_data/OUTPUT/%s_round", analysis.round.1st.exp)
all_first_exprs <- Sys.glob(file.path(path.to.first.exp, "*"))
names(all_first_exprs) <-  to_vec(for(exprs in all_first_exprs) str_replace(basename(exprs), sprintf("_%s_round", analysis.round.1st.exp), ""))
#####----------------------------------------------------------------------#####
#
# PATH TO THE DEEPER DATASET
#
#####----------------------------------------------------------------------#####
path.to.deeper.exp <- sprintf("/media/hieunguyen/HD0/ext_HDD/CRC1382/src/211227_deeper_scRNA_LKopplin/OFFICIAL/high_confidence_VDJ_contigs/OUTPUT_mt_thres10/%s_round", analysis.round)
all_deeper_exprs <- Sys.glob(file.path(path.to.deeper.exp, "*"))
names(all_deeper_exprs) <-  to_vec(for(exprs in all_deeper_exprs) str_replace(basename(exprs), sprintf("_%s_round", analysis.round), ""))
#####----------------------------------------------------------------------#####
#
# BEGIN THE MAIN ANALYSIS
#
#####----------------------------------------------------------------------#####
all_exprs <- c(all_first_exprs, all_deeper_exprs)
data.list <- list()
##### PROCESSING THE FIRST DATASET
for (i in seq_along(all_first_exprs)){
data.list[[i]] <- readRDS(Sys.glob(file.path(all_first_exprs[[i]], "s8a_output", "*.rds")))
}
first.exp.s.obj <- merge(x = data.list[[1]],
y = unlist(data.list[2:length(data.list)]),
merge.data = FALSE,
add.cell.ids = names(all_first_exprs),
project = PROJECT)
chosen.assay <- "RNA"
DefaultAssay(first.exp.s.obj) <- chosen.assay
first.exp.s.obj <- NormalizeData(first.exp.s.obj) # ---> use Log Normalized
first.exp.s.obj <- FindVariableFeatures(first.exp.s.obj, selection.method = "vst")
first.exp.s.obj <- ScaleData(first.exp.s.obj, features = rownames(first.exp.s.obj))
first.exp.s.obj <- RunPCA(first.exp.s.obj, npcs = 25, verbose = FALSE, reduction.name=sprintf("%s_PCA", chosen.assay))
first.exp.s.obj <- RunUMAP(first.exp.s.obj, reduction = sprintf("%s_PCA", chosen.assay), dims = 1:25, reduction.name=sprintf("%s_UMAP", chosen.assay))
##### PROCESSING THE DEEPER DATASET
data.list <- list()
for (i in seq_along(all_deeper_exprs)){
data.list[[i]] <- readRDS(Sys.glob(file.path(all_deeper_exprs[[i]], "s8a_output", "*.rds")))
}
deeper.exp.s.obj <- merge(x = data.list[[1]],
y = unlist(data.list[2:length(data.list)]),
merge.data = FALSE,
add.cell.ids = names(all_deeper_exprs),
project = PROJECT)
chosen.assay <- "RNA"
DefaultAssay(deeper.exp.s.obj) <- chosen.assay
deeper.exp.s.obj <- NormalizeData(deeper.exp.s.obj) # ---> use Log Normalized
deeper.exp.s.obj <- FindVariableFeatures(deeper.exp.s.obj, selection.method = "vst")
deeper.exp.s.obj <- ScaleData(deeper.exp.s.obj, features = rownames(deeper.exp.s.obj))
deeper.exp.s.obj <- RunPCA(deeper.exp.s.obj, npcs = 25, verbose = FALSE, reduction.name=sprintf("%s_PCA", chosen.assay))
deeper.exp.s.obj <- RunUMAP(deeper.exp.s.obj, reduction = sprintf("%s_PCA", chosen.assay), dims = 1:25, reduction.name=sprintf("%s_UMAP", chosen.assay))
deeper_exp_umap <- DimPlot(object = deeper.exp.s.obj, reduction = "RNA_UMAP", group.by = "name", label = TRUE, label.box = TRUE, repel = TRUE)
integration.anchors <- FindTransferAnchors(reference = first.exp.s.obj, query = deeper.exp.s.obj,
dims = 1:25, reference.reduction = "RNA_PCA")
predictions <- TransferData(anchorset = integration.anchors, refdata = first.exp.s.obj$stage,
dims = 1:25)
deeper.exp.s.obj <- AddMetaData(deeper.exp.s.obj, metadata = predictions$predicted.id, col.name = "prediction")
q()
